name: Build, Push to ECR & Deploy on EC2

on:
  push:
    branches:
      - main    # runs when you push to main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout the repo
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2️⃣ Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1   # change to your region

      # 3️⃣ Login to ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 4️⃣ Build, tag, and push the Docker image
      - name: Build, tag, and push Docker image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: myapp     # <-- change this to your ECR repo name
          IMAGE_TAG: latest
        run: |
          echo "Building Docker image..."
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          echo "Pushing Docker image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "Image pushed successfully!"

      # 5️⃣ Deploy on EC2 (SSH)
      - name: Deploy on EC2 instance
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}                # public IP or DNS of EC2
          username: ec2-user                           # or ubuntu (depends on AMI)
          key: ${{ secrets.EC2_SSH_KEY }}              # private SSH key (PEM content)
          script: |
            echo "Logging into ECR on EC2..."
            aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}

            echo "Pulling latest Docker image..."
            docker pull ${{ steps.login-ecr.outputs.registry }}/myapp:latest

            echo "Stopping old container..."
            docker stop myapp || true
            docker rm myapp || true

            echo "Running new container..."
            docker run -d -p 8000:8000 --name myapp ${{ steps.login-ecr.outputs.registry }}/myapp:latest

            echo "Deployment successful!"
